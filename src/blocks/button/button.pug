include ../material-icons/material-icons.pug

mixin button({ type, name, value, actionLink, isDemo = false, hasShift=false }={})
  - let typeClass
  .button
    case type
      when 'rich'
        - typeClass = `button__content_${type}`
        .button__wrapper.button__wrapper_rich
          .button__arrow
            +material-icons({type: "arrow_forward"})
          .button__content(class = hasShift && 'button__content_with-shift')=value
          input(type="submit", name=name, value=value, class=typeClass)
      when 'empty'
        - typeClass = `button__content_${type}`
        .button__wrapper.button__wrapper_empty(class = isDemo && 'button__wrapper_demo')
          a.button__content(href=actionLink, class=typeClass)=value
      when 'empty-dark'
        - typeClass = `button__content_${type}`
        .button__wrapper.button__wrapper_empty(class = isDemo && 'button__wrapper_demo')
          a.button__content(href=actionLink, class=typeClass)=value
      when 'with-gradient-background'
        - typeClass = `button__content_${type}`
        .button__wrapper(class = isDemo && 'button__wrapper_demo')
          a.button__content(href=actionLink, class=typeClass)=value
      when 'with-gradient-background-small'
        - typeClass = `button__content_${type}`
        .button__wrapper.button__wrapper_small(class = isDemo && 'button__wrapper_demo')
          a.button__content(href=actionLink, class=typeClass)=value
      when 'bordered'
        - typeClass = `button__content_${type}`
        .button__wrapper.button__wrapper_bordered(class = isDemo && 'button__wrapper_demo')
          .button__wrapper-border
            a.button__content(href=actionLink, class=typeClass)=value
      when 'bordered-small'
        - typeClass = `button__content_${type}`
        .button__wrapper.button__wrapper_bordered-small(class = isDemo && 'button__wrapper_demo')
          .button__wrapper-border
            a.button__content(href=actionLink, class=typeClass)=value
